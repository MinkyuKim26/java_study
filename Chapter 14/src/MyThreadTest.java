//멀티 테스킹(Multi-tasking) : 하나의 프로그램 안에서 여러 가지 작업을 동시에 실행 -> 컴퓨터 시스템의 성능을 높이기 위한 방법
//하나의 프로그램 안에서 여러가지 작업을 동시에 수행하는 것
//예 : 음악 재생 프로그램은 인터넷을 통해 mp3파일을 다운로드 받으면서 동시에 압축을 풀어 음악을 재생. 
//이들 각각의 작업(mp3파일 다운로드, 압축 풀기, 음악 재생)을 스레드(thread)라고 부른다.
//자바는 멀티스레딩을 프로그래머들에게 언어 수준에서 제공.(프로그래머가 스레드 여러개 생성 -> 자바 런타임 시스템에 의해 동시에 실행

//컴퓨터 실행 단위 : 프로세스(process), 스레드(thread)
//프로세스 : 자신만의 데이터를 가짐.
//스레드 : 하나의 프로세스 안에 존재. 동일한 데이터를 공유
//동일한 데이터 공유 <- 동시에 수행되는 스레드들이 변수를 공유.(상당히 위험할 수 있으나 동시에 변수를 공유함으로써 스레드간의 통신이 효율적이게 됨.

//멀티스레딩을 사용하는 이유
//자바 응용 프로그램을 보다 빠르게 실행하기 위함.
//다중 코어 CPU의 경우 여러 코어를 최대한 활용 가능
//특히 웹서버처럼 많은 클라이언트 컴퓨터가 접속하고 이들에게 빠른 응답을 하려면 다중 코어와 멀티스레딩을 적극적으로 사용해야한다.(최대한 많은 인원에게 동시에 응답)
//멀티스레딩은 자바 어플리케이션(프로그램)에서 CPU의 멀티 코어를 활용하는 중요한 기법

//멀티스레딩의 문제
//동기화 문제 : 동시 작업 프로그램의 경우, 동시에 여러가지 데이터를 공유하게 되며 이 때 동기화라고 하는 까다로운 문제가 발생
//예 : 버스 좌석 3개 남아있는걸 2명이 보고 그 중 2자리를 동시에 예약. -> 문제 발생(좌석은 3갠데 예약 좌석이 2 + 2 = 4개)
//자바에서 이 문제를 해결하기 위한 도구들이 있다. 

//스레드 생성, 실행 방법 : Thread클래스 상속, Runnable 인터페이스 구현

//Thread 클래스 상속하는 방법
//자바에서 스레드를 나타내는 클래스 : Thread -> 상속 후 run() 메소드 재정의
//run() : 스레드가 수행해야할 작업 내용이 들어감. 스레드가 시작되면 자바 런타임 시스템에 의해 호출.
//객체 생성 후 start() 메소드를 호출하여 스레드 시작

class MyThread extends Thread 
{ 
	public void run() 
	{
		for (int i = 10; i >= 0; i--) System.out.print(i + " ");
	} 
}


public class MyThreadTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Thread t = new MyThread(); //자식 클래스로 생성된 객체를 부모 클래스로 받는다. 
		t.start();
	}

}
